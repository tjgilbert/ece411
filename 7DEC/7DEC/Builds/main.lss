
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000e8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000780  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f62  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000183e  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001850  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004bb  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003fc  00000000  00000000  00001d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000078  00000000  00000000  00002127  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  0000219f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	26 d0       	rcall	.+76     	; 0x7c <main>
  30:	59 c0       	rjmp	.+178    	; 0xe4 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <initIO>:
*/
    
 //Initial setup:
    
 // MCUCR = 0x40; // Uncomment to disable internal pull ups
    DDRA =  0b11111101; //Port A data direction register [DDA7:DDA0] (0=input 1=output)  (all outputs except reed switch pin)
  34:	8d ef       	ldi	r24, 0xFD	; 253
  36:	8a bb       	out	0x1a, r24	; 26
    DDRB =  0xFF; //Port B data direction register [DDB3:DDB0] (0=input 1=output) (set all portB pins to outputs (not used)
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
    PORTA = 0x00; //Port A data register [PORTA7:PORTA0]   (initialize all bits to zero)
  3c:	1b ba       	out	0x1b, r1	; 27
    PORTB = 0x00; //Port B data register [PORTA3:PORTB0]
  3e:	18 ba       	out	0x18, r1	; 24
//PWM SETUP
    
    
    //Frequency in khz
    
    OSCCAL = 0x7F; // set internal oscilator frequency. The two values overlap, ie. 0x7F > 0x80
  40:	8f e7       	ldi	r24, 0x7F	; 127
  42:	81 bf       	out	0x31, r24	; 49
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	80 e8       	ldi	r24, 0x80	; 128
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	86 bd       	out	0x26, r24	; 38
  4e:	96 bd       	out	0x26, r25	; 38
  50:	0f be       	out	0x3f, r0	; 63
    clock_prescale_set(0);  // default is /8.. (0) = /1 , (1)= /2, (8)=/256
    
        ICR1 = 80;  //pwm period  (125kHz)
  52:	80 e5       	ldi	r24, 0x50	; 80
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	95 bd       	out	0x25, r25	; 37
  58:	84 bd       	out	0x24, r24	; 36
        OCR1A = 8;  //~10%   (pwm duty cycle)
  5a:	88 e0       	ldi	r24, 0x08	; 8
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	9b bd       	out	0x2b, r25	; 43
  60:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 0;  //different counter
  62:	19 bc       	out	0x29, r1	; 41
  64:	18 bc       	out	0x28, r1	; 40
  66:	08 95       	ret

00000068 <pwm>:

}

void pwm(int input){

    if (input){
  68:	89 2b       	or	r24, r25
  6a:	21 f0       	breq	.+8      	; 0x74 <pwm+0xc>
        TCCR1A = _BV(COM1A1) | _BV(WGM11);     //COM1A1-> set OC1A to output, WGM11+WGM12+WGM13 =set mode = fast pwm
  6c:	82 e8       	ldi	r24, 0x82	; 130
  6e:	8f bd       	out	0x2f, r24	; 47
        TCCR1B = _BV(CS10) | _BV(WGM12) | _BV(WGM13); //CS10 ->no clk prescaling=>fastest
  70:	89 e1       	ldi	r24, 0x19	; 25
  72:	02 c0       	rjmp	.+4      	; 0x78 <pwm+0x10>

    }
    else{
            TCCR1A = ~_BV(COM1A1) | ~_BV(WGM11);     //set to default values
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	8f bd       	out	0x2f, r24	; 47
            TCCR1B = ~_BV(CS10) | ~_BV(WGM12) | _BV(WGM13); //set to default values
  78:	8e bd       	out	0x2e, r24	; 46
  7a:	08 95       	ret

0000007c <main>:



int main(void) {
    
	initIO();
  7c:	db df       	rcall	.-74     	; 0x34 <initIO>
}

void pwm(int input){

    if (input){
        TCCR1A = _BV(COM1A1) | _BV(WGM11);     //COM1A1-> set OC1A to output, WGM11+WGM12+WGM13 =set mode = fast pwm
  7e:	22 e8       	ldi	r18, 0x82	; 130
        TCCR1B = _BV(CS10) | _BV(WGM12) | _BV(WGM13); //CS10 ->no clk prescaling=>fastest
  80:	99 e1       	ldi	r25, 0x19	; 25

    }
    else{
            TCCR1A = ~_BV(COM1A1) | ~_BV(WGM11);     //set to default values
  82:	8f ef       	ldi	r24, 0xFF	; 255
    
	initIO();
    
	while (1) {
        
        if (SWITCH) {
  84:	c9 9b       	sbis	0x19, 1	; 25
  86:	15 c0       	rjmp	.+42     	; 0xb2 <main+0x36>
        TCCR1A = _BV(COM1A1) | _BV(WGM11);     //COM1A1-> set OC1A to output, WGM11+WGM12+WGM13 =set mode = fast pwm
        TCCR1B = _BV(CS10) | _BV(WGM12) | _BV(WGM13); //CS10 ->no clk prescaling=>fastest

    }
    else{
            TCCR1A = ~_BV(COM1A1) | ~_BV(WGM11);     //set to default values
  88:	8f bd       	out	0x2f, r24	; 47
            TCCR1B = ~_BV(CS10) | ~_BV(WGM12) | _BV(WGM13); //set to default values
  8a:	8e bd       	out	0x2e, r24	; 46
    
	while (1) {
        
        if (SWITCH) {
            pwm(0);
            LEDG = 0;
  8c:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	3f ef       	ldi	r19, 0xFF	; 255
  90:	4e e9       	ldi	r20, 0x9E	; 158
  92:	54 e2       	ldi	r21, 0x24	; 36
  94:	31 50       	subi	r19, 0x01	; 1
  96:	40 40       	sbci	r20, 0x00	; 0
  98:	50 40       	sbci	r21, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x18>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x22>
  9e:	00 00       	nop
            _delay_ms(750);
            LEDG = 1;
  a0:	db 9a       	sbi	0x1b, 3	; 27
  a2:	3f e7       	ldi	r19, 0x7F	; 127
  a4:	48 e3       	ldi	r20, 0x38	; 56
  a6:	51 e0       	ldi	r21, 0x01	; 1
  a8:	31 50       	subi	r19, 0x01	; 1
  aa:	40 40       	sbci	r20, 0x00	; 0
  ac:	50 40       	sbci	r21, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x2c>
  b0:	16 c0       	rjmp	.+44     	; 0xde <main+0x62>
}

void pwm(int input){

    if (input){
        TCCR1A = _BV(COM1A1) | _BV(WGM11);     //COM1A1-> set OC1A to output, WGM11+WGM12+WGM13 =set mode = fast pwm
  b2:	2f bd       	out	0x2f, r18	; 47
        TCCR1B = _BV(CS10) | _BV(WGM12) | _BV(WGM13); //CS10 ->no clk prescaling=>fastest
  b4:	9e bd       	out	0x2e, r25	; 46
            _delay_ms(25);
        }
        
        else {
            pwm(1);
            LEDG = 0;
  b6:	db 98       	cbi	0x1b, 3	; 27
            LEDR = 1;
  b8:	da 9a       	sbi	0x1b, 2	; 27
  ba:	3f ef       	ldi	r19, 0xFF	; 255
  bc:	41 ee       	ldi	r20, 0xE1	; 225
  be:	54 e0       	ldi	r21, 0x04	; 4
  c0:	31 50       	subi	r19, 0x01	; 1
  c2:	40 40       	sbci	r20, 0x00	; 0
  c4:	50 40       	sbci	r21, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x44>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4e>
  ca:	00 00       	nop
            _delay_ms(100);
            LEDG = 1;
  cc:	db 9a       	sbi	0x1b, 3	; 27
            LEDR = 0;
  ce:	da 98       	cbi	0x1b, 2	; 27
  d0:	3f ef       	ldi	r19, 0xFF	; 255
  d2:	41 ee       	ldi	r20, 0xE1	; 225
  d4:	54 e0       	ldi	r21, 0x04	; 4
  d6:	31 50       	subi	r19, 0x01	; 1
  d8:	40 40       	sbci	r20, 0x00	; 0
  da:	50 40       	sbci	r21, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x5a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x64>
  e0:	00 00       	nop
  e2:	d0 cf       	rjmp	.-96     	; 0x84 <main+0x8>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
