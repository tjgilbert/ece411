
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000e2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000738  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f5a  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000017ea  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001800  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004bb  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003fc  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000078  00000000  00000000  000020d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  0000214f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	29 d0       	rcall	.+82     	; 0x82 <main>
  30:	56 c0       	rjmp	.+172    	; 0xde <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <initIO>:
*/
    
 //Initial setup:
    
 // MCUCR = 0x40; // Uncomment to disable internal pull ups
    DDRA =  0b11111101; //Port A data direction register [DDA7:DDA0] (0=input 1=output)
  34:	8d ef       	ldi	r24, 0xFD	; 253
  36:	8a bb       	out	0x1a, r24	; 26
    DDRB =  0xFF; //Port B data direction register [DDB3:DDB0] (0=input 1=output)
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
    PORTA = 0b00000000; //Port A data register [PORTA7:PORTA0]
  3c:	1b ba       	out	0x1b, r1	; 27
    PORTB = 0b00000000; //Port B data register [PORTA3:PORTB0]
  3e:	18 ba       	out	0x18, r1	; 24
//PWM SETUP
    
    
    //Frequency in khz
    
    OSCCAL = 0x7F; // set internal oscilator frequency. The two values overlap, ie. 0x7F > 0x80
  40:	8f e7       	ldi	r24, 0x7F	; 127
  42:	81 bf       	out	0x31, r24	; 49
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	80 e8       	ldi	r24, 0x80	; 128
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	86 bd       	out	0x26, r24	; 38
  4e:	96 bd       	out	0x26, r25	; 38
  50:	0f be       	out	0x3f, r0	; 63
    clock_prescale_set(0);  // default is /8.. (0) = /1 , (1)= /2, (8)=/256
    
    //DDRA|=(1<<PA6);
    
    TCCR1A = _BV(COM1A1) | _BV(WGM11);     //TCCR1A = COM1A1 COM1A0 COM1B1 COM1B0 – – WGM11 WGM10
  52:	82 e8       	ldi	r24, 0x82	; 130
  54:	8f bd       	out	0x2f, r24	; 47
   
    TCCR1B = _BV(CS10) | _BV(WGM12) | _BV(WGM13);
  56:	89 e1       	ldi	r24, 0x19	; 25
  58:	8e bd       	out	0x2e, r24	; 46
        ICR1 = 41;
  5a:	89 e2       	ldi	r24, 0x29	; 41
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	95 bd       	out	0x25, r25	; 37
  60:	84 bd       	out	0x24, r24	; 36
        OCR1A = 20;
  62:	84 e1       	ldi	r24, 0x14	; 20
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	9b bd       	out	0x2b, r25	; 43
  68:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 0;
  6a:	19 bc       	out	0x29, r1	; 41
  6c:	18 bc       	out	0x28, r1	; 40
    
    
    
    TCCR0A = _BV(COM0B1) /*| _BV(COM0B0)*/ | _BV(WGM02)|_BV(WGM01) | _BV(WGM00);
  6e:	8b e2       	ldi	r24, 0x2B	; 43
  70:	80 bf       	out	0x30, r24	; 48
    
    TCCR0B = _BV(CS00) ; //No prescaling - toggle mode?
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	83 bf       	out	0x33, r24	; 51
    
    OCR0A =10;
  76:	8a e0       	ldi	r24, 0x0A	; 10
  78:	86 bf       	out	0x36, r24	; 54
    OCR0B = 50;
  7a:	82 e3       	ldi	r24, 0x32	; 50
  7c:	8c bf       	out	0x3c, r24	; 60
  7e:	08 95       	ret

00000080 <PWM_EN>:
}


void PWM_EN(void) {
  80:	08 95       	ret

00000082 <main>:



int main(void) {
    
	initIO();
  82:	d8 df       	rcall	.-80     	; 0x34 <initIO>

    LEDR = 1;
  84:	da 9a       	sbi	0x1b, 2	; 27
	while (1) {
        
        if (SWITCH) {
  86:	c9 9b       	sbis	0x19, 1	; 25
  88:	13 c0       	rjmp	.+38     	; 0xb0 <main+0x2e>
            LEDG = 1;
  8a:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	80 e7       	ldi	r24, 0x70	; 112
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x10>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1a>
  9c:	00 00       	nop
            _delay_ms(50);
            LEDG = 0;
  9e:	db 98       	cbi	0x1b, 3	; 27
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
  ae:	14 c0       	rjmp	.+40     	; 0xd8 <main+0x56>
            _delay_ms(50);
        }
        
        else {
            LEDG = 1;
  b0:	db 9a       	sbi	0x1b, 3	; 27
            LEDR = 0;
  b2:	da 98       	cbi	0x1b, 2	; 27
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	89 e6       	ldi	r24, 0x69	; 105
  b8:	98 e1       	ldi	r25, 0x18	; 24
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x38>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x42>
  c4:	00 00       	nop
            _delay_ms(500);
            LEDG = 0;
  c6:	db 98       	cbi	0x1b, 3	; 27
            LEDR = 1;
  c8:	da 9a       	sbi	0x1b, 2	; 27
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	89 e6       	ldi	r24, 0x69	; 105
  ce:	98 e1       	ldi	r25, 0x18	; 24
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x4e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x58>
  da:	00 00       	nop
  dc:	d4 cf       	rjmp	.-88     	; 0x86 <main+0x4>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
