
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000086  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000618  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000eae  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000015d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004bb  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003fc  00000000  00000000  00001ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000078  00000000  00000000  00001eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  00001f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	27 d0       	rcall	.+78     	; 0x7e <main>
  30:	28 c0       	rjmp	.+80     	; 0x82 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <initIO>:
 (PCINT6/OC1A/SDA/MOSI/DI/ADC6) PA6|7  8|PA5 (ADC5/DO/MISO/OC1B/PCINT5)
*/
    
 //Initial setup:
 // MCUCR = 0x40; // Uncomment to disable internal pull ups
    DDRA =  0b11111111; //Port A data direction register [DDA7:DDA0] (0=input 1=output)
  34:	8f ef       	ldi	r24, 0xFF	; 255
  36:	8a bb       	out	0x1a, r24	; 26
    DDRB =  0xFF; //Port B data direction register [DDB3:DDB0] (0=input 1=output)
  38:	87 bb       	out	0x17, r24	; 23
    PORTA = 0b00000000; //Port A data register [PORTA7:PORTA0]
  3a:	1b ba       	out	0x1b, r1	; 27
    PORTB = 0b00000000; //Port B data register [PORTA3:PORTB0]
  3c:	18 ba       	out	0x18, r1	; 24
//PWM SETUP
    
    
    //Frequency in khz
    
    OSCCAL = 0x7F; // set internal oscilator frequency. The two values overlap, ie. 0x7F > 0x80
  3e:	8f e7       	ldi	r24, 0x7F	; 127
  40:	81 bf       	out	0x31, r24	; 49
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	80 e8       	ldi	r24, 0x80	; 128
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	86 bd       	out	0x26, r24	; 38
  4c:	96 bd       	out	0x26, r25	; 38
  4e:	0f be       	out	0x3f, r0	; 63
    clock_prescale_set(0);  // default is /8.. (0) = /1 , (1)= /2, (8)=/256
    
    //DDRA|=(1<<PA6);
    
    TCCR1A = _BV(COM1A1) | _BV(WGM11);     //TCCR1A = COM1A1 COM1A0 COM1B1 COM1B0 – – WGM11 WGM10
  50:	82 e8       	ldi	r24, 0x82	; 130
  52:	8f bd       	out	0x2f, r24	; 47
   
    TCCR1B = _BV(CS10) | _BV(WGM12) | _BV(WGM13);
  54:	89 e1       	ldi	r24, 0x19	; 25
  56:	8e bd       	out	0x2e, r24	; 46
        ICR1 = 41;
  58:	89 e2       	ldi	r24, 0x29	; 41
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	95 bd       	out	0x25, r25	; 37
  5e:	84 bd       	out	0x24, r24	; 36
        OCR1A = 20;
  60:	84 e1       	ldi	r24, 0x14	; 20
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	9b bd       	out	0x2b, r25	; 43
  66:	8a bd       	out	0x2a, r24	; 42
        OCR1B = 0;
  68:	19 bc       	out	0x29, r1	; 41
  6a:	18 bc       	out	0x28, r1	; 40
    
    
    
    TCCR0A = _BV(COM0B1) /*| _BV(COM0B0)*/ | _BV(WGM02)|_BV(WGM01) | _BV(WGM00);
  6c:	8b e2       	ldi	r24, 0x2B	; 43
  6e:	80 bf       	out	0x30, r24	; 48
    
    TCCR0B = _BV(CS00) ; //No prescaling - toggle mode?
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	83 bf       	out	0x33, r24	; 51
    
    OCR0A =10;
  74:	8a e0       	ldi	r24, 0x0A	; 10
  76:	86 bf       	out	0x36, r24	; 54
    OCR0B = 50;
  78:	82 e3       	ldi	r24, 0x32	; 50
  7a:	8c bf       	out	0x3c, r24	; 60
  7c:	08 95       	ret

0000007e <main>:
}

int main(void) {
    
	initIO();
  7e:	da df       	rcall	.-76     	; 0x34 <initIO>
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x2>

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
